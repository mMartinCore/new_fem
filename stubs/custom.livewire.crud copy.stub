<?php

namespace App\Http\Livewire;

use App\Models\{{}};
use Livewire\Component;
use Livewire\WithPagination;

class {{}} extends Component
{
    use WithPagination;
    
    public $modalFormVisible;
    public $modalConfirmDeleteVisible;
    public $modalConfirmDeleteSelectedVisible;
    public $modelId;


    public $perPage = 10;
    public $sortField='id';
    public $sortAsc = true;

    public $table_name, $model_name; 

    public array $orderable;

    public string $search = '';

    public array $selected = [];





    /**
     * Put your custom public properties here!
     */

    /**
     * The validation rules
     *
     * @return void
     */
    public function rules()
    {
        return [            
        ];
    }

    /**
     * Loads the model data
     * of this component.
     *
     * @return void
     */
    public function loadModel()
    {
        $data = {{}}::find($this->modelId);
        // Assign the variables here
    }

    /**
     * The data for the model mapped
     * in this component.
     *
     * @return void
     */
    public function modelData()
    {
        return [          
        ];
    }





    public function sortBy($field)
    {
        if ($this->sortField === $field) {
            $this->sortAsc = ! $this->sortAsc;
        } else {
            $this->sortAsc = true;
        }

        $this->sortField = $field;
    }

    public function getSelectedCountProperty()
    {
        return count($this->selected);
    }

    public function updatingSearch()
    {
        $this->resetPage();
    }

    public function updatingPerPage()
    {
        $this->resetPage();
    }

    public function resetSelected()
    {
        $this->selected = [];
    }









    /**
     * The create function.
     *
     * @return void
     */
    public function create()
    {
        $this->validate();
        {{}}::create($this->modelData());
        $this->modalFormVisible = false;
        $this->reset();
    }

    

    /**
     * The update function
     *
     * @return void
     */
    public function update()
    {
        $this->validate();
        {{}}::find($this->modelId)->update($this->modelData());
        $this->modalFormVisible = false;
    }

    /**
     * The delete function.
     *
     * @return void
     */
    public function delete()
    {
        {{}}::destroy($this->modelId);
        $this->modalConfirmDeleteVisible = false;
        $this->resetPage();
    }

    /**
     * Shows the create modal
     *
     * @return void
     */
    public function createShowModal()
    {
        $this->resetValidation();
        $this->reset();
        $this->modalFormVisible = true;
    }

    /**
     * Shows the form modal
     * in update mode.
     *
     * @param  mixed $id
     * @return void
     */
    public function updateShowModal($id)
    {
        $this->resetValidation();
        $this->reset();
        $this->modalFormVisible = true;
        $this->modelId = $id;
        $this->loadModel();
    }

    /**
     * Shows the delete confirmation modal.
     *
     * @param  mixed $id
     * @return void
     */
    public function deleteShowModal($id)
    {
        $this->modelId = $id;
        $this->modalConfirmDeleteVisible = true;
    }    

    
    public function deleteShowModalSelected()
    {
      
        $this->modalConfirmDeleteSelectedVisible = true;
    }   

    
    public function deleteSelected()
    { 

        {{}}::whereIn('id', $this->selected)->delete(); 
         $this->modalConfirmDeleteSelectedVisible = false;
        $this->resetPage();
    }

     public function mergedSelected()
      { 

        {{}}::whereIn('id', $this->selected);

        $this->resetSelected();
     }

    public function render()
    {

        $data = $this->search ==''? {{}}::orderBy($this->sortField, $this->sortAsc ? 'asc' : 'desc')->paginate($this->perPage) 
        : {{}}::where('phone_no_1', 'LIKE', "%{$this->search}%")->orWhere( 'email_1', 'LIKE', '%'. $this->search .'%')
        ->orderBy($this->sortField, $this->sortAsc ? 'asc' : 'desc')->paginate($this->perPage);

        return view('livewire.{{}}', [
            'data' =>  $data ,
        ]);
    }
}